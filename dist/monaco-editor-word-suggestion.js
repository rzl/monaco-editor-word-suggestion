!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I():"function"==typeof define&&define.amd?define([],I):"object"==typeof exports?exports["monaco-editor-word-suggestion"]=I():g["monaco-editor-word-suggestion"]=I()}(self,(()=>(()=>{var __webpack_modules__={975:module=>{eval("window.MonacoEditorWordSuggestion = class MonacoEditorWordSuggestion {\r\n    language = 'javascript'\r\n    monaco = window.monaco\r\n    autoRegister = true\r\n    disposeOther = true\r\n    tokenPattern = new RegExp('([a-zA-Z]+)', 'g');\r\n    baseTheme = 'vs-dark'\r\n    themeName = 'vs-dark'\r\n    provider = {\r\n        color: undefined,\r\n        hover: undefined,\r\n        completionItem: undefined\r\n    }\r\n    rules = [\r\n        {\r\n            token: 'that',\r\n            target: window.vue,\r\n            foreground: 'e23aff',\r\n            fontStyle: ''\r\n        },\r\n        {\r\n            token: 'theDate',\r\n            fnTarget: () => new Date(),\r\n            foreground: 'e23aff',\r\n            fontStyle: ''\r\n        }\r\n    ]\r\n    documentCache = {\r\n        ['that']: {\r\n            label: 'that',\r\n            documentation: { value: '## that document' }\r\n        }\r\n    }\r\n    get defaultSuggestion() {\r\n        return this.rules.map((rule) => {\r\n            return {\r\n                label: rule.token,\r\n                kind: this.monaco.languages.CompletionItemKind.Keyword,\r\n                insertText: rule.token\r\n            }\r\n        })\r\n    }\r\n    get targetMap() {\r\n        var map = {}\r\n        this.rules.forEach((r) => {\r\n            map[r.token] = r.target\r\n        })\r\n        return map\r\n    }\r\n    get legend() {\r\n        return {\r\n            tokenTypes: this.tokens,\r\n            tokenModifiers: []\r\n        }\r\n    }\r\n    get tokens() {\r\n        return this.rules.map(v => v.token)\r\n    }\r\n    get colorRules() {\r\n        return this.rules.map(v => ({\r\n            token: v.token,\r\n            foreground: v.foreground,\r\n            fontStyle: v.fontStyle\r\n        }))\r\n    }\r\n    get startsWiths() {\r\n        return this.rules.map(v => v.token + '.')\r\n    }\r\n    constructor(opt) {\r\n        Object.assign(this, opt)\r\n        if (this.autoRegister) {\r\n            this.register()\r\n        }\r\n        if (this.disposeOther) {\r\n            this.list.forEach(item => item.dispose())\r\n        }\r\n        this.list.push(this)\r\n    }\r\n    register(type) {\r\n        if (type) {\r\n            switch (type) {\r\n                case 'hover': this.registerHover()\r\n                    break;\r\n                case 'completionItem': this.registerCompletionItem()\r\n                    break;\r\n                case 'color':\r\n                    this.registerDocumentSemanticTokens()\r\n                    this.defineTheme()\r\n                    break;\r\n            }\r\n        } else {\r\n            this.registerHover()\r\n            this.registerCompletionItem()\r\n            this.registerDocumentSemanticTokens()\r\n            this.defineTheme()\r\n        }\r\n    }\r\n    dispose(type) {\r\n        if (type) {\r\n            switch (type) {\r\n                case 'hover': this.provider.hover && this.provider.hover.dispose()\r\n                    break;\r\n                case 'completionItem': this.provider.completionItem && this.provider.completionItem.dispose()\r\n                    break;\r\n                case 'color':\r\n                    this.provider.color && this.provider.color.dispose()\r\n                    break;\r\n            }\r\n        } else {\r\n            this.provider.completionItem && this.provider.completionItem.dispose()\r\n            this.provider.color && this.provider.color.dispose()\r\n            this.provider.hover && this.provider.hover.dispose()\r\n        }\r\n    }\r\n    keysSetCache() {\r\n\r\n    }\r\n    async ongGetAllkeys(wordword, setCahce) {}\r\n    async getAllkeys(wordword, obj) {\r\n        if (this.keysSetCache[wordword]) {\r\n            await this.ongGetAllkeys(wordword, this.keysSetCache[wordword])\r\n            return [...this.keysSetCache[wordword]]\r\n        }\r\n        const keys = []\r\n        let temp = obj\r\n        while (temp) {\r\n            keys.push.apply(keys, Object.getOwnPropertyNames(temp))\r\n            keys.push.apply(keys, Object.getOwnPropertySymbols(temp))\r\n            temp = Object.getPrototypeOf(temp)\r\n        }\r\n        this.keysSetCache[wordword] = new Set(keys.filter(o => typeof o == 'string'))\r\n        await this.ongGetAllkeys(wordword, this.keysSetCache[wordword])\r\n        return [...this.keysSetCache[wordword]]\r\n    }\r\n    async onResolveWordHoverData(wordword, cache) {}\r\n    async resolveWordHoverData(wordword) {\r\n        if (!this.documentCache[wordword]) {\r\n            let obj = await this.resolveObj(wordword)\r\n            this.resolveSuggestion(wordword, obj, '')\r\n        }\r\n        await this.onResolveWordHoverData(wordword, this.documentCache[wordword])\r\n\r\n        return this.documentCache[wordword]\r\n    }\r\n    async onHover(wordword, res) {}\r\n    registerHover() {\r\n        let { monaco, language } = this\r\n        if (this.provider.hover) return\r\n        this.provider.hover = monaco.languages.registerHoverProvider(language, {\r\n            provideHover: async (model, position) => {\r\n                try {\r\n                    let pos = model.getWordAtPosition(position)\r\n                    if (!pos) return\r\n                    var wordword = model.getValueInRange({\r\n                        startLineNumber: position.lineNumber,\r\n                        startColumn: 1,\r\n                        endLineNumber: position.lineNumber,\r\n                        endColumn: model.getWordAtPosition(position).endColumn\r\n                    }).replace(/\\t/g, ' ').trim();\r\n                    if (wordword[wordword.length - 1] == '.') {\r\n                        wordword = wordword.substring(wordword.lastIndexOf(' ') + 1, wordword.length)\r\n                    }\r\n                    let data = await this.resolveWordHoverData(wordword)\r\n                    if (data) {\r\n                        var res = {\r\n                            contents: [\r\n                                { value: `**${data.label}**` },\r\n                                { value: data.documentation.value }\r\n                            ]\r\n                        };\r\n                        await this.onHover(wordword, res)\r\n                        return res\r\n                    }\r\n                } catch (e) {\r\n                    //  console.error(e)\r\n                }\r\n            }\r\n        });\r\n    }\r\n    resolveRule(wordword) {\r\n        return this.rules.find((rule) => {\r\n            return wordword.startsWith(`${rule.token}.`)\r\n        })\r\n    }\r\n    async resolveObj(wordword) {\r\n        try {\r\n            let rule = this.resolveRule(wordword)\r\n            var target = rule.target\r\n            if (rule.fnTarget) {\r\n                target = await rule.fnTarget()\r\n            }\r\n            if (wordword[wordword.length - 1] == '.') {\r\n                return eval(wordword.substring(0, wordword.length - 1).replace(rule.token, 'target'));\r\n            } else {\r\n                return eval(wordword.substring(0, wordword.length).replace(rule.token, 'target'));\r\n            }\r\n        } catch (e) {\r\n            return undefined\r\n        }\r\n    }\r\n    resolveSuggestion(wordword, obj, k) {\r\n        var { monaco, language } = this\r\n        let tmp = k !== '' ? obj[k] : obj\r\n        if (this.documentCache[wordword + k]) {\r\n            return this.documentCache[wordword + k]\r\n        }\r\n        try {\r\n            var res = {\r\n                label: k,\r\n                kind: typeof tmp === 'function' ? monaco.languages.CompletionItemKind.Function : monaco.languages.CompletionItemKind.Property,\r\n                documentation: {\r\n                    value: '```javascript\\n' +\r\n                        (typeof tmp === 'function' ? tmp.toString() : k) +\r\n                        '\\n```'\r\n                },\r\n                insertText: k\r\n            }\r\n        } catch (e) {\r\n            res = {\r\n                label: k,\r\n                kind: monaco.languages.CompletionItemKind.Property,\r\n                documentation: k,\r\n                insertText: k\r\n            }\r\n        }\r\n        if (!this.documentCache[wordword + k]) {\r\n            this.documentCache[wordword + k] = JSON.parse(JSON.stringify(res))\r\n        }\r\n        return this.documentCache[wordword + k]\r\n    }\r\n    async onCompletionItem(wordword, res) {}\r\n    registerCompletionItem() {\r\n        var { monaco, language } = this\r\n        if (this.provider.completionItem) return\r\n        this.provider.completionItem = monaco.languages.registerCompletionItemProvider(language, {\r\n            triggerCharacters: '.',\r\n            provideCompletionItems: async (model, position) => {\r\n                var wordword = model.getValueInRange({\r\n                    startLineNumber: position.lineNumber,\r\n                    startColumn: 1,\r\n                    endLineNumber: position.lineNumber,\r\n                    endColumn: position.column\r\n                }).replace(/\\t/g, ' ').trim();\r\n                if (wordword[wordword.length - 1] == '.') {\r\n                    wordword = wordword.substring(wordword.lastIndexOf(' ') + 1, wordword.length)\r\n                }\r\n\r\n                let obj = await this.resolveObj(wordword)\r\n                if (obj) {\r\n                    let suggestions = (await this.getAllkeys(wordword, obj)).map((k) => {\r\n                        return this.resolveSuggestion(wordword, obj, k)\r\n                    });\r\n                    var res =  { suggestions }\r\n                    await this.onCompletionItem(wordword, res)\r\n                    return res\r\n                }\r\n\r\n                var res = {\r\n                    suggestions: this.defaultSuggestion\r\n                };\r\n                await this.onCompletionItem(wordword, res)\r\n                return res\r\n            }\r\n        });\r\n    }\r\n    defineTheme() {\r\n        this.monaco.editor.defineTheme(this.themeName, {\r\n            base: this.baseTheme,\r\n            inherit: true,\r\n            colors: {},\r\n            rules: this.colorRules\r\n        })\r\n    }\r\n    getType(type) {\r\n        return this.legend.tokenTypes.indexOf(type);\r\n    }\r\n    registerDocumentSemanticTokens() {\r\n        let { monaco, language, tokenPattern } = this\r\n        if (this.provider.color) return\r\n        this.provider.color = monaco.languages.registerDocumentSemanticTokensProvider(language, {\r\n            getLegend: () => {\r\n                return this.legend;\r\n            },\r\n            provideDocumentSemanticTokens: (model, lastResultId, token) => {\r\n                const lines = model.getLinesContent();\r\n\r\n                const data = [];\r\n\r\n                let prevLine = 0;\r\n                let prevChar = 0;\r\n\r\n                for (let i = 0; i < lines.length; i++) {\r\n                    const line = lines[i];\r\n\r\n                    for (let match = null; (match = tokenPattern.exec(line));) {\r\n                        // translate token and modifiers to number representations\r\n                        let type = this.getType(match[1]);\r\n                        if (type === -1) {\r\n                            continue;\r\n                        }\r\n                        let modifier = 0;\r\n\r\n                        data.push(\r\n                            // translate line to deltaLine\r\n                            i - prevLine,\r\n                            // for the same line, translate start to deltaStart\r\n                            prevLine === i ? match.index - prevChar : match.index,\r\n                            match[0].length,\r\n                            type,\r\n                            modifier\r\n                        );\r\n\r\n                        prevLine = i;\r\n                        prevChar = match.index;\r\n                    }\r\n                }\r\n                return {\r\n                    data: new Uint32Array(data),\r\n                    resultId: null\r\n                };\r\n            },\r\n            releaseDocumentSemanticTokens: function (resultId) { }\r\n        });\r\n    }\r\n}\r\nMonacoEditorWordSuggestion.prototype.list = []\r\n\r\nmodule.exports = MonacoEditorWordSuggestion\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///975\n")}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var C=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g](C,C.exports,__webpack_require__),C.exports}var __webpack_exports__=__webpack_require__(975);return __webpack_exports__})()));